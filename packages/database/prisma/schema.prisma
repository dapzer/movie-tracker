generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime

  @@map("sessions")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt() @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id              String           @id @default(uuid())
  // userName     String?     @unique
  name            String?
  email           String?          @unique
  image           String?
  isEmailVerified Boolean          @default(false) @map("is_email_verified")
  signUpMethod    SignUpMethodEnum @map("sign_up_method")
  password        String?

  roles     UserRoleEnum[] @default([USER])
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt() @map("updated_at")

  mediaLists     MediaList[]
  accounts       Account[]
  mediaListLikes MediaListLike[]

  @@map("users")
}

model MediaList {
  id              String          @id @default(uuid())
  humanFriendlyId String          @unique @map("human_friendly_id")
  userId          String          @map("user_id")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String?
  poster          String?
  isSystem        Boolean         @default(false) @map("is_system")
  isPublic        Boolean         @default(false) @map("is_public")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt() @map("updated_at")
  mediaItems      MediaItem[]
  likes           MediaListLike[]

  @@map("media_lists")
}

model MediaListLike {
  id          String    @id @default(uuid())
  mediaListId String    @map("media_list_id")
  mediaList   MediaList @relation(fields: [mediaListId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([mediaListId, userId])
  @@map("media_list_likes")
}

model MediaItem {
  id        String        @id @default(uuid())
  mediaId   Int           @map("media_id")
  mediaType MediaTypeEnum @map("media_type")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt() @map("updated_at")

  mediaListId    String        @map("media_list_id")
  mediaList      MediaList     @relation(fields: [mediaListId], references: [id], onDelete: Cascade)
  mediaDetailsId String?       @map("media_details_id")
  mediaDetails   MediaDetails? @relation(fields: [mediaDetailsId], references: [id], onDelete: Cascade)
  trackingData   TrackingData?

  @@unique([mediaId, mediaType, mediaListId])
  @@map("media_items")
}

model TrackingData {
  id String @id @default(uuid())

  currentStatus StatusNameEnum @default(NOT_VIEWED) @map("current_status")
  note          String         @default("")
  score         Int?
  sitesToView   Json           @default("[]") @map("sites_to_view")
  tvProgress    Json           @map("tv_progress")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @updatedAt() @map("updated_at")

  mediaItem   MediaItem @relation(fields: [mediaItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mediaItemId String    @unique @map("media_item_id")

  @@map("tracking_data")
}

model MediaDetails {
  id        String        @id @default(uuid())
  mediaId   Int           @map("media_id")
  mediaType MediaTypeEnum @map("media_type")
  score     Decimal?
  en        Json
  ru        Json
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt() @map("updated_at")

  mediaItem MediaItem[]

  @@unique([mediaId, mediaType])
  @@map("media_details")
}

enum StatusNameEnum {
  VIEWED
  WATCHING_NOW
  NOT_VIEWED
  WAIT_NEW_PART
}

enum MediaTypeEnum {
  movie
  tv
}

enum UserRoleEnum {
  ADMIN
  USER
}

enum SignUpMethodEnum {
  EMAIL
  GOOGLE
  GITHUB
  VK
  YANDEX
}
